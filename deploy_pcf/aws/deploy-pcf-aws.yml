---
# === concourse ===
worker_tag: &worker_tag
github_user: &github_user cf-toolsmiths
github_email: &github_email cf-toolsmiths@pivotal.io
github_key: &github_key {{github-key}}
download_retry_attempts: &retry 3


# === pivnet ===
pivnet_token: &pivnet_token {{pivnet-token}}
opsmgr_version: &opsmgr_version 1.7.9
ert_version: &ert_version 1.7.13

# ===environment config ===
iaas: &iaas aws

environment_yml_git_repo: &environment_yml_git_repo git@github.com:<YOUR-ORG>/<YOUR-REPO>
environment_yml_folder: &environment_yml_folder aws/environments/<ENVIRONMENT-NAME> # this is the path within your git repo

aws_access_key_id: &aws_access_key_id <AWS-ACCESS-KEY-ID>
aws_secret_access_key: &aws_secret_access_key <AWS-SECRET-ACCESS-KEY>
aws_environment_name: &aws_environment_name <ENVIRONMENT-NAME>
aws_system_domain: &aws_system_domain <ENVIRONMENT-NAME>.example.com
aws_key_pair_name: &aws_key_pair_name <ENVIRONMENT-KEY-PAIR-NAME>
aws_rds_username: &aws_rds_username <RDS-USERNAME>
aws_rds_password: &aws_rds_password <RDS-PASSWORD>
aws_public_key: &aws_public_key <PUBLIC-KEY-STRING>
aws_private_key_file_name: &aws_private_key_file_name <PRIVATE-KEY-FILENAME> # this key is expected to be inside your environment folder inside the git repo
aws_region: &aws_region <AWS-REGION>
aws_s3_endpoint: &aws_s3_endpoint 'https://s3.amazonaws.com' # This varies per region: http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region

aws_route_53_access_key_id: &aws_route53_access_key_id <AWS-ROUTE53-ACCESS-KEY-ID>
aws_route_53_secret_access_key: &aws_route53_secret_access_key <AWS-ROUTE53-SECRET-ACCESS-KEY>
aws_route_53_hosted_zone_id: &aws_route53_hosted_zone_id <AWS-ROUTE53-HOSTED-ZONE-ID>
ops_manager_fqdn: &ops_manager_fqdn <YOUR-OPSMANAGER-FQDN>

ops_manager_password: &ops_manager_password <YOUR-OPSMANAGER-PASSWORD>

# OPTIONAL: This is for setting up E-mail notifications. If you do not want to set this up, delete the values "<...>"
smtp_from: &smtp_from <SMTP-FROM-ADDRESS>
smtp_address: &smtp_address <SMTP-ADDRESS>
smtp_port: &smtp_port <SMTP-PORT>
smtp_user: &smtp_user <SMTP-USER>
smtp_password: &smtp_password <SMTP-PASSWORD>

groups:
- name: bootstrap-aws
  jobs:
  - generate-self-signed-cert
  - prepare-environment

- name: deploy-pcf
  jobs:
  - verify-or-generate-environment-yaml
  - install-ops-manager-aws
  - configure-ops-manager-aws
  - download-upload-ert-tile
  - configure-elastic-runtime
  - trigger-install

- name: destroy-pcf-aws
  jobs:
  - destroy-pcf-aws
  - delete-all-bootstrap-resources

resources:
  - name: toolsmiths-shared-scripts
    type: git
    source:
      uri: https://github.com/pivotal-cf/toolsmiths-shared-scripts
  - name: p-runtime
    type: git
    source:
      uri: git@github.com:pivotal-cf/p-runtime.git
      private_key: *github_key
      branch: rel/1.8
  - name: environment-ymls
    type: git
    source:
      uri: *environment_yml_git_repo
      private_key: *github_key
      branch: master
jobs:

  - name: generate-self-signed-cert
    serial: true
    plan:
    - aggregate:
      - get: toolsmiths-shared-scripts
      - get: environment-ymls
    - task: generate-self-signed-cert
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/aws_tools
        inputs:
        - name: toolsmiths-shared-scripts
        - name: environment-ymls
        outputs:
        - name: output
        run:
          path: /bin/bash
          args: ['-c', 'git clone ./environment-ymls ./output/environment-ymls/ && mkdir -p ouput/environment-ymls/${ENV_FOLDER} && toolsmiths-shared-scripts/deploy_pcf/aws/generate_self_signed_cert.sh -n output/environment-ymls/${ENV_FOLDER} ${AWS_ENVIRONMENT_NAME} && pushd output/environment-ymls && git config --global user.email ${GIT_EMAIL} && git config --global user.name ${GIT_USER} && git add . && git commit -m"Adding self-signed certs for ${AWS_ENVIRONMENT_NAME}" || true && popd']
      params:
        AWS_ENVIRONMENT_NAME: *aws_environment_name
        ENV_FOLDER: *environment_yml_folder
        GIT_EMAIL: *github_email
        GIT_USER: *github_user
    - put: environment-ymls
      params: {rebase: true, repository: output/environment-ymls}
    - task: upload-cert
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        inputs:
        - name: environment-ymls
        image: docker:///cftoolsmiths/aws_tools
        run:
          path: /bin/bash
          args: ['-c', 'echo "Uploading public key to aws" && aws iam upload-server-certificate --server-certificate-name ${AWS_ENVIRONMENT_NAME} --certificate-body file://${PWD}/environment-ymls/${ENV_FOLDER}/${AWS_ENVIRONMENT_NAME}.pem --private-key file://${PWD}/environment-ymls/${ENV_FOLDER}/${AWS_ENVIRONMENT_NAME}.key']
      params:
        ENV_FOLDER: *environment_yml_folder
        AWS_ENVIRONMENT_NAME: *aws_environment_name
        AWS_KEY_PAIR_NAME: *aws_key_pair_name
        AWS_PUBLIC_KEY: *aws_public_key
        AWS_ACCESS_KEY_ID: *aws_access_key_id
        AWS_SECRET_ACCESS_KEY: *aws_secret_access_key
        AWS_DEFAULT_REGION: *aws_region

  - name: prepare-environment
    serial: true
    plan:
    - aggregate:
      - get: toolsmiths-shared-scripts
    - task: download-cloudformation-script
      attempts: *retry
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/deploy-pcf-vsphere
        inputs:
        - name: toolsmiths-shared-scripts
        outputs:
        - name: pivnet-downloads
        run:
          path: /bin/bash
          args: ['-c', 'export BUNDLE_GEMFILE=${PWD}/toolsmiths-shared-scripts/deploy_pcf/Gemfile && pushd pivnet-downloads && bundle install && bundle exec ../toolsmiths-shared-scripts/deploy_pcf/download-from-pivnet.rb -e -c']
      params:
        PIVNET_TOKEN: *pivnet_token
        ERT_VERSION: *ert_version
    - task: upload-key
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/aws_tools
        run:
          path: /bin/bash
          args: ['-c', 'echo "Uploading public key to aws" && aws ec2 import-key-pair --key-name ${AWS_KEY_PAIR_NAME} --public-key-material "$(echo ${AWS_PUBLIC_KEY})"']
      params:
        AWS_KEY_PAIR_NAME: *aws_key_pair_name
        AWS_PUBLIC_KEY: *aws_public_key
        AWS_ACCESS_KEY_ID: *aws_access_key_id
        AWS_SECRET_ACCESS_KEY: *aws_secret_access_key
        AWS_DEFAULT_REGION: *aws_region
    - task: generate-cloudformation-parameters
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/aws_tools
        outputs:
        - name: cloudformation-parameters
        run:
          path: /bin/bash
          args: ['-c', "export ARN=$(aws iam get-server-certificate --server-certificate-name ${AWS_ENVIRONMENT_NAME} --output text | grep arn | awk '{print $2}') && echo 'Generating cloudformation parameter' && echo \"[{\\\"ParameterKey\\\":\\\"05RdsUsername\\\",\\\"ParameterValue\\\":\\\"${AWS_RDS_USERNAME}\\\"},{\\\"ParameterKey\\\":\\\"06RdsPassword\\\",\\\"ParameterValue\\\":\\\"${AWS_RDS_PASSWORD}\\\"},{\\\"ParameterKey\\\":\\\"01NATKeyPair\\\",\\\"ParameterValue\\\":\\\"${AWS_KEY_PAIR_NAME}\\\"},{\\\"ParameterKey\\\":\\\"07SSLCertificateARN\\\",\\\"ParameterValue\\\":\\\"${ARN}\\\"}]\" > parameters.json && cat parameters.json"]
          dir: cloudformation-parameters
      params:
        AWS_KEY_PAIR_NAME: *aws_key_pair_name
        AWS_PUBLIC_KEY: *aws_public_key
        AWS_ACCESS_KEY_ID: *aws_access_key_id
        AWS_SECRET_ACCESS_KEY: *aws_secret_access_key
        AWS_ENVIRONMENT_NAME: *aws_environment_name
        AWS_RDS_USERNAME: *aws_rds_username
        AWS_RDS_PASSWORD: *aws_rds_password
        AWS_DEFAULT_REGION: *aws_region
        AWS_SYSTEM_DOMAIN: *aws_system_domain
    - task: run-cloudformation
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/aws_tools
        inputs:
        - name: pivnet-downloads
        - name: cloudformation-parameters
        run:
          path: /bin/bash
          args: ['-c', 'echo "Running cloudformation script" && export CLOUDFORMATION_PATH=$(ls ${PWD}/pivnet-downloads/*.json) && aws cloudformation create-stack --stack-name ${AWS_ENVIRONMENT_NAME} --template-body file:///${CLOUDFORMATION_PATH} --parameters file:///${PWD}/cloudformation-parameters/parameters.json --capabilities CAPABILITY_IAM']
      params:
        AWS_KEY_PAIR_NAME: *aws_key_pair_name
        AWS_PUBLIC_KEY: *aws_public_key
        AWS_ACCESS_KEY_ID: *aws_access_key_id
        AWS_SECRET_ACCESS_KEY: *aws_secret_access_key
        AWS_ENVIRONMENT_NAME: *aws_environment_name
        AWS_RDS_USERNAME: *aws_rds_username
        AWS_RDS_PASSWORD: *aws_rds_password
        AWS_DEFAULT_REGION: *aws_region

  - name: verify-or-generate-environment-yaml
    serial: true
    plan:
    - aggregate:
      - get: toolsmiths-shared-scripts
      - get: environment-ymls
      - get: p-runtime
    - task: verify-or-generate-environment-yaml
      attempts: *retry
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/deploy-pcf-aws
        inputs:
        - name: toolsmiths-shared-scripts
        - name: environment-ymls
        outputs:
        - name: output
        run:
          path: /bin/bash
          args: ['-c', 'git clone ./environment-ymls ./output/environment-ymls/ && mkdir -p ouput/environment-ymls/${ENV_FOLDER} && toolsmiths-shared-scripts/deploy_pcf/aws/verify_or_generate_environment_yml.sh output/environment-ymls/${ENV_FOLDER} && pushd output/environment-ymls && git config --global user.email ${GIT_EMAIL} && git config --global user.name ${GIT_USER} && git add . && git commit -m"Adding ${AWS_ENVIRONMENT_NAME} manifest" || true && popd']
      params:
        ENV_FOLDER: *environment_yml_folder
        GIT_EMAIL: *github_email
        GIT_USER: *github_user
        OPS_MANAGER_PASSWORD: *ops_manager_password
        AWS_PRIVATE_KEY_FILE_NAME: *aws_private_key_file_name
        AWS_KEY_PAIR_NAME: *aws_key_pair_name
        AWS_PUBLIC_KEY: *aws_public_key
        AWS_ACCESS_KEY_ID: *aws_access_key_id
        AWS_SECRET_ACCESS_KEY: *aws_secret_access_key
        AWS_ENVIRONMENT_NAME: *aws_environment_name
        AWS_S3_ENDPOINT: *aws_s3_endpoint
        AWS_DEFAULT_REGION: *aws_region
        AWS_SYSTEM_DOMAIN: *aws_system_domain
        SMTP_FROM: *smtp_from
        SMTP_ADDRESS: *smtp_address
        SMTP_PORT: *smtp_port
        SMTP_USER: *smtp_user
        SMTP_PASSWORD: *smtp_password
    - put: environment-ymls
      params: {rebase: true, repository: output/environment-ymls}

  - name: install-ops-manager-aws
    serial: true
    plan:
    - aggregate:
      - get: toolsmiths-shared-scripts
      - get: environment-ymls
        passed: [verify-or-generate-environment-yaml]
        trigger: true
      - get: p-runtime
        passed: [verify-or-generate-environment-yaml]
        trigger: true
    - task: download-ami
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/deploy-pcf-aws
        inputs:
        - name: toolsmiths-shared-scripts
        outputs:
        - name: ami
        run:
          path: /bin/bash
          args: ['-c', 'export BUNDLE_GEMFILE=${PWD}/toolsmiths-shared-scripts/deploy_pcf/Gemfile && pushd ami && bundle install && bundle exec ../toolsmiths-shared-scripts/deploy_pcf/download-from-pivnet.rb -o ${OPSMGR_VERSION} -i ${IAAS} && popd']
      params:
        PIVNET_TOKEN: *pivnet_token
        OPSMGR_VERSION: *opsmgr_version
        IAAS: *iaas
    - task: install-ops-manager
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/deploy-pcf-aws
        inputs:
        - name: toolsmiths-shared-scripts
        - name: p-runtime
        - name: environment-ymls
        - name: ami
        outputs:
        - name: output
        run:
          path: /bin/bash
          args: ['-c', './toolsmiths-shared-scripts/deploy_pcf/aws/install_ops_manager.sh']
      params:
        GIT_EMAIL: *github_email
        GIT_USER: *github_user
        ENV_FOLDER: *environment_yml_folder
        AWS_SECRET_ACCESS_KEY: *aws_secret_access_key
        AWS_ACCESS_KEY_ID: *aws_access_key_id
        AWS_ENVIRONMENT_NAME: *aws_environment_name
        AWS_DEFAULT_REGION: *aws_region
        AWS_ROUTE53_ACCESS_KEY_ID: *aws_route53_access_key_id
        AWS_ROUTE53_SECRET_ACCESS_KEY: *aws_route53_secret_access_key
        AWS_ROUTE53_HOSTED_ZONE_ID: *aws_route53_hosted_zone_id
        AWS_SYSTEM_DOMAIN: *aws_system_domain
        OPS_MANAGER_FQDN: *ops_manager_fqdn
    - put: environment-ymls
      params: {rebase: true, repository: output/environment-ymls}

  - name: configure-ops-manager-aws
    serial: true
    plan:
    - aggregate:
      - get: toolsmiths-shared-scripts
      - get: environment-ymls
        passed: [install-ops-manager-aws]
        trigger: true
      - get: p-runtime
        passed: [install-ops-manager-aws]
        trigger: true
    - task: add-first-user
      attempts: *retry
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/deploy-pcf-aws
        inputs:
        - name: toolsmiths-shared-scripts
        - name: environment-ymls
        - name: p-runtime
        run:
          path: /bin/bash
          args: ['-c', 'bundle && ./deploy_pcf.rb -D ../../environment-ymls/${ENV_FOLDER} -N ${AWS_ENVIRONMENT_NAME} -i ${IAAS} -H -C opsmgr:add_first_user']
          dir: toolsmiths-shared-scripts/deploy_pcf
      params:
        IAAS: *iaas
        ENV_FOLDER: *environment_yml_folder
        OPSMGR_VERSION: *opsmgr_version
        AWS_ENVIRONMENT_NAME: *aws_environment_name
    - task: configure-micro-bosh
      attempts: *retry
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/deploy-pcf-aws
        inputs:
        - name: toolsmiths-shared-scripts
        - name: environment-ymls
        - name: p-runtime
        run:
          path: /bin/bash
          args: ['-c', 'bundle && ./deploy_pcf.rb -D ../../environment-ymls/${ENV_FOLDER} -N ${AWS_ENVIRONMENT_NAME} -i ${IAAS} -H -C opsmgr:microbosh:configure']
          dir: toolsmiths-shared-scripts/deploy_pcf
      params:
        IAAS: *iaas
        OPSMGR_VERSION: *opsmgr_version
        ENV_FOLDER: *environment_yml_folder
        AWS_ENVIRONMENT_NAME: *aws_environment_name

  - name: download-upload-ert-tile
    serial: true
    plan:
    - aggregate:
      - get: toolsmiths-shared-scripts
      - get: environment-ymls
        passed: [configure-ops-manager-aws]
        trigger: true
      - get: p-runtime
        passed: [configure-ops-manager-aws]
        trigger: true
    - task: download-elastic-runtime-from-pivnet
      attempts: *retry
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/deploy-pcf-aws
        inputs:
        - name: toolsmiths-shared-scripts
        outputs:
        - name: pivnet-downloads
        run:
          path: /bin/bash
          args: ['-c', 'export BUNDLE_GEMFILE=${PWD}/toolsmiths-shared-scripts/deploy_pcf/Gemfile && pushd pivnet-downloads && bundle install && bundle exec ../toolsmiths-shared-scripts/deploy_pcf/download-from-pivnet.rb -e -i ${IAAS}']
      params:
        PIVNET_TOKEN: *pivnet_token
        ERT_VERSION: *ert_version
        IAAS: *iaas

    - task: upload-elastic-runtime
      attempts: *retry
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/deploy-pcf-aws
        inputs:
        - name: toolsmiths-shared-scripts
        - name: pivnet-downloads
        - name: environment-ymls
        - name: p-runtime
          passed: [download-upload-ert-tile]
          trigger: true
        run:
          path: /bin/bash
          args: ['-c', 'bundle install && ./deploy_pcf.rb -D ../../environment-ymls/${ENV_FOLDER} -N ${AWS_ENVIRONMENT_NAME} -i ${IAAS} -E $(ls ../../pivnet-downloads/*.pivotal) -H -C opsmgr:product:upload_add,opsmgr:product:import_stemcell']
          dir: toolsmiths-shared-scripts/deploy_pcf
      params:
        AWS_ENVIRONMENT_NAME: *aws_environment_name
        ENV_FOLDER: *environment_yml_folder
        OPSMGR_VERSION: *opsmgr_version
        PIVNET_TOKEN: *pivnet_token
        IAAS: *iaas

  - name: configure-elastic-runtime
    serial: true
    plan:
    - aggregate:
      - get: toolsmiths-shared-scripts
      - get: environment-ymls
        passed: [download-upload-ert-tile]
        trigger: true
      - get: p-runtime
        passed: [download-upload-ert-tile]
        trigger: true
    - task: configure-elastic-runtime
      attempts: *retry
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/deploy-pcf-aws
        inputs:
        - name: toolsmiths-shared-scripts
        - name: environment-ymls
        - name: p-runtime
        run:
          path: /bin/bash
          args: ['-c', 'bundle install && ./deploy_pcf.rb -D ../../environment-ymls/${ENV_FOLDER} -N ${AWS_ENVIRONMENT_NAME} -H -C ert:configure,ert:create_aws_dbs,ert:configure_external_dbs,ert:configure_external_file_storage']
          dir: toolsmiths-shared-scripts/deploy_pcf
      params:
        AWS_ENVIRONMENT_NAME: *aws_environment_name
        ENV_FOLDER: *environment_yml_folder
        OPSMGR_VERSION: *opsmgr_version
        ERT_VERSION: *ert_version

  - name: trigger-install
    serial: true
    plan:
    - aggregate:
      - get: environment-ymls
        passed: [configure-elastic-runtime]
        trigger: true
      - get: toolsmiths-shared-scripts
      - get: p-runtime
        passed: [configure-elastic-runtime]
        trigger: true
    - task: trigger-install
      attempts: *retry
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/deploy-pcf-aws
        inputs:
        - name: toolsmiths-shared-scripts
        - name: environment-ymls
        - name: p-runtime
        run:
          path: /bin/bash
          args: ['-c', 'bundle install && ./deploy_pcf.rb -D ../../environment-ymls/${ENV_FOLDER} -N ${AWS_ENVIRONMENT_NAME} -H -C opsmgr:trigger_install']
          dir: toolsmiths-shared-scripts/deploy_pcf
      params:
        AWS_ENVIRONMENT_NAME: *aws_environment_name
        ENV_FOLDER: *environment_yml_folder
        OPSMGR_VERSION: *opsmgr_version
        ERT_VERSION: *ert_version
        PIVNET_TOKEN: *pivnet_token

  - name: destroy-pcf-aws
    serial: true
    plan:
    - aggregate:
      - get: environment-ymls
      - get: toolsmiths-shared-scripts
      - get: p-runtime
    - task: destroy-pcf-aws
      attempts: *retry
      tags: *worker_tag
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/deploy-pcf-aws
        inputs:
        - name: toolsmiths-shared-scripts
        - name: environment-ymls
        - name: p-runtime
        run:
          path: /bin/bash
          args: ['-c', 'bundle install && ./deploy_pcf.rb -D ../../environment-ymls/${ENV_FOLDER} -N ${AWS_ENVIRONMENT_NAME} -H -C opsmgr:destroy']
          dir: toolsmiths-shared-scripts/deploy_pcf
      params:
        AWS_ENVIRONMENT_NAME: *aws_environment_name
        ENV_FOLDER: *environment_yml_folder
        OPSMGR_VERSION: *opsmgr_version
        ERT_VERSION: *ert_version
        PIVNET_TOKEN: *pivnet_token
    - task: delete-ec2-key-pair
      attempts: *retry
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/aws_tools
        run:
          path: /bin/bash
          args: ['-c', 'echo "Deleting key-pair: ${AWS_KEY_PAIR_NAME} ..." && aws ec2 delete-key-pair --key-name ${AWS_KEY_PAIR_NAME}']
      params:
        AWS_KEY_PAIR_NAME: *aws_key_pair_name
        AWS_DEFAULT_REGION: *aws_region
        AWS_ACCESS_KEY_ID: *aws_access_key_id
        AWS_SECRET_ACCESS_KEY: *aws_secret_access_key

  - name: delete-all-bootstrap-resources
    serial: true
    plan:
    - aggregate:
      - get: environment-ymls
    - task: delete-ec2-key-pair
      attempts: *retry
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/aws_tools
        run:
          path: /bin/bash
          args: ['-c', 'echo "Deleting key-pair: ${AWS_KEY_PAIR_NAME} ..." && aws ec2 delete-key-pair --key-name ${AWS_KEY_PAIR_NAME}']
      params:
        AWS_KEY_PAIR_NAME: *aws_key_pair_name
        AWS_DEFAULT_REGION: *aws_region
        AWS_ACCESS_KEY_ID: *aws_access_key_id
        AWS_SECRET_ACCESS_KEY: *aws_secret_access_key
    - task: delete-cloudformation-stack
      attempts: *retry
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/aws_tools
        run:
          path: /bin/bash
          args: ['-c', 'echo "Deleting cloudformation-stack: ${AWS_ENVIRONMENT_NAME} ..." && aws cloudformation delete-stack --stack-name ${AWS_ENVIRONMENT_NAME}']
      params:
        AWS_ENVIRONMENT_NAME: *aws_environment_name
        AWS_DEFAULT_REGION: *aws_region
        AWS_ACCESS_KEY_ID: *aws_access_key_id
        AWS_SECRET_ACCESS_KEY: *aws_secret_access_key
    - task: delete-certificate
      attempts: *retry
      privileged: true
      config:
        platform: linux
        image: docker:///cftoolsmiths/aws_tools
        inputs:
        - name: environment-ymls
        run:
          path: /bin/bash
          args: ['-c', "export ARN=$(aws acm list-certificates --output text | grep ${AWS_SYSTEM_DOMAIN} | awk '{print $2}') && echo \"Deleting certificates: ${AWS_ENVIRONMENT_NAME} ...\" && aws acm delete-certificate --certificate-arn ${ARN}"]
      params:
        ENV_FOLDER: *environment_yml_folder
        AWS_ENVIRONMENT_NAME: *aws_environment_name
        AWS_DEFAULT_REGION: *aws_region
        AWS_ACCESS_KEY_ID: *aws_access_key_id
        AWS_SECRET_ACCESS_KEY: *aws_secret_access_key
    - put: environment-ymls
      params: {repository: environment-ymls}
